<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jeeplus.modules.oldnew.dao.comment.OldnewCommentDao">
    
	<sql id="oldnewCommentColumns">
		a.id AS "id",
		a.create_date AS "createDate",
		a.remarks AS "remarks",
		a.satisfy_level AS "satisfyLevel",
		a.max_popularity AS "maxPopularity",
		a.fans_up AS "fansUp",
		a.duration AS "duration",
		a.content AS "content",
		a.label AS "label",
		a.order_id AS "orderId",
		a.user_id AS "userId",
		a.type AS "type"
	</sql>
	
	<sql id="oldnewCommentJoins">
	</sql>
    
	<select id="get" resultType="OldnewComment" >
		SELECT 
			<include refid="oldnewCommentColumns"/>
		FROM oldnew_comment  a
		<include refid="oldnewCommentJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="getOneComment" resultType="OldnewComment" >
		SELECT 
			<include refid="oldnewCommentColumns"/>
		FROM oldnew_comment  a
		WHERE a.order_id = #{0} and a.user_id = #{1} and a.type = #{2}
	</select>
	
	<select id="getCommentCountByOrder" resultType="integer" >
		SELECT count(0)
		FROM oldnew_comment  a
		WHERE a.order_id = #{0}
	</select>
	
	<select id="findList" resultType="OldnewComment" >
		SELECT 
			<include refid="oldnewCommentColumns"/>
		FROM oldnew_comment  a
		<include refid="oldnewCommentJoins"/>
		<where>
			<if test="orderId != null and orderId != ''">
				a.order_id = #{orderId}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="OldnewComment" >
		SELECT 
			<include refid="oldnewCommentColumns"/>
		FROM oldnew_comment  a
		<include refid="oldnewCommentJoins"/>
		<where>
			
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO oldnew_comment (
			id,
			create_date,
			remarks,
			satisfy_level,
			max_popularity,
			fans_up,
			duration,
			content,
			label,
			order_id,
			user_id,
			type
		) VALUES (
			#{id},
			#{createDate},
			#{remarks},
			#{satisfyLevel},
			#{maxPopularity},
			#{fansUp},
			#{duration},
			#{content},
			#{label},
			#{orderId},
			#{userId},
			#{type}
		)
	</insert>
	
	<update id="update">
		UPDATE oldnew_comment  SET 	
			remarks = #{remarks},
			satisfy_level = #{satisfyLevel},
			max_popularity = #{maxPopularity},
			fans_up = #{fansUp},
			duration = #{duration},
			content = #{content},
			label = #{label},
			order_id = #{orderId},
			user_id = #{userId},
			type = #{type}
		WHERE id = #{id}
	</update>
	
	
	<!--物理删除-->
	<update id="delete">
		DELETE FROM oldnew_comment 
		WHERE id = #{id}
	</update>
	
	<!--逻辑删除-->
	<update id="deleteByLogic">
		UPDATE oldnew_comment  SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
	
	<!-- 根据实体名称和字段名称和字段值获取唯一记录 -->
	<select id="findUniqueByProperty" resultType="OldnewComment" statementType="STATEMENT">
		select * FROM oldnew_comment   where ${propertyName} = '${value}'
	</select>
	
</mapper>